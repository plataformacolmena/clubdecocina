/**
 * ============================================================================
 * DIAGN√ìSTICO DE CONFIGURACIONES EMAIL - TIEMPO REAL
 * ============================================================================
 * 
 * Script para diagnosticar el estado actual de las configuraciones
 * sin hacer cambios, solo consultas de solo lectura.
 */

// Importar Firebase - usar window.db si est√° disponible, sino importar
let db;
try {
    // Intentar usar la instancia global primero
    if (window.db) {
        db = window.db;
    } else {
        // Fallback a importaci√≥n directa
        const firebaseConfig = await import('./firebase-config.js');
        db = firebaseConfig.db;
    }
} catch (error) {
    console.warn('‚ö†Ô∏è Error importando Firebase, se usar√° window.db:', error.message);
}

import { doc, getDoc } from 'https://www.gstatic.com/firebasejs/10.7.0/firebase-firestore.js';

class EmailConfigDiagnostic {
    constructor() {
        this.results = {
            appsScript: null,
            envioConfig: null,
            emailService: null,
            problems: [],
            recommendations: []
        };
    }

    async runDiagnostic() {
        console.log('üîç INICIANDO DIAGN√ìSTICO DE CONFIGURACIONES EMAIL...');
        console.log('===============================================');

        // Reinicializar arrays de resultados
        this.results = {
            appsScript: null,
            envioConfig: null,
            emailService: null,
            problems: [],
            recommendations: []
        };
        this.problems = [];
        this.recommendations = [];

        try {
            // Si window.db no est√° disponible pero EmailService s√≠ est√° inicializado,
            // podemos usar las configuraciones que ya carg√≥ EmailService
            const canUseFirestore = window.db || (window.emailService && window.emailService.initialized);
            
            if (!canUseFirestore) {
                throw new Error('Firebase no est√° disponible y EmailService no est√° inicializado');
            }

            // 1. Verificar configuraci√≥n Apps Script
            await this.checkAppsScriptConfig();
            
            // 2. Verificar configuraci√≥n de env√≠o
            await this.checkEnvioConfig();
            
            // 3. Verificar estado del EmailService
            await this.checkEmailServiceState();
            
            // 4. Generar reporte
            this.generateReport();

        } catch (error) {
            console.error('‚ùå Error durante el diagn√≥stico:', error);
            
            // Mostrar informaci√≥n de debugging
            console.log('üîç Estado del sistema:');
            console.log('   Firebase (db):', !!window.db);
            console.log('   AuthManager:', !!window.authManager);
            console.log('   EmailService:', !!window.emailService);
            console.log('   Usuario admin:', window.authManager?.isCurrentUserAdmin() || false);
        }
    }

    async checkAppsScriptConfig() {
        console.log('üìß Verificando configuraci√≥n Apps Script...');
        
        try {
            // Estrategia 1: Si EmailService ya tiene la configuraci√≥n, usarla
            if (window.emailService && window.emailService.scriptConfig) {
                console.log('‚úÖ Usando configuraci√≥n Apps Script desde EmailService');
                const config = window.emailService.scriptConfig;
                this.results.appsScript = config;

                console.log('‚úÖ Configuraci√≥n Apps Script encontrada:');
                console.log('   üìù Nombre:', config.nombre || 'No definido');
                console.log('   üîó URL:', config.url || 'No definida');
                console.log('   ‚úÖ Activo:', config.activo || false);

                // Validar configuraci√≥n
                if (!config.url || config.url.includes('TU_SCRIPT_ID_AQUI')) {
                    this.problems.push('‚ùå URL de Apps Script no configurada (contiene placeholder)');
                    this.recommendations.push('üîß Configurar URL real del deployment en panel admin');
                }

                if (!config.activo) {
                    this.problems.push('‚ùå Apps Script est√° DESACTIVADO');
                    this.recommendations.push('üîß Activar Apps Script desde panel de admin');
                }
                
                return;
            }
            
            // Estrategia 2: Acceso directo a Firestore si est√° disponible
            const dbInstance = window.db || db;
            if (!dbInstance) {
                this.problems.push('‚ùå No se puede acceder a configuraci√≥n Apps Script');
                this.recommendations.push('üîß Verificar inicializaci√≥n de Firebase y EmailService');
                return;
            }
            
            const scriptDoc = await getDoc(doc(dbInstance, 'configuraciones', 'apps_script'));
            
            if (!scriptDoc.exists()) {
                this.problems.push('‚ùå NO EXISTE configuraci√≥n apps_script en Firestore');
                this.recommendations.push('üîß Crear configuraci√≥n desde panel de admin');
                return;
            }

            const config = scriptDoc.data();
            this.results.appsScript = config;

            console.log('‚úÖ Configuraci√≥n Apps Script encontrada:');
            console.log('   üìù Nombre:', config.nombre || 'No definido');
            console.log('   üîó URL:', config.url || 'No definida');
            console.log('   ‚úÖ Activo:', config.activo || false);

            // Validar configuraci√≥n
            if (!config.url || config.url.includes('TU_SCRIPT_ID_AQUI')) {
                this.problems.push('‚ùå URL de Apps Script no configurada (contiene placeholder)');
                this.recommendations.push('üîß Configurar URL real del deployment en panel admin');
            }

            if (!config.activo) {
                this.problems.push('‚ùå Apps Script est√° DESACTIVADO');
                this.recommendations.push('üîß Activar Apps Script desde panel de admin');
            }

        } catch (error) {
            this.problems.push(`‚ùå Error accediendo apps_script: ${error.message}`);
        }
    }

    async checkEnvioConfig() {
        console.log('üìÆ Verificando configuraci√≥n de env√≠o...');
        
        try {
            // Estrategia 1: Si EmailService ya tiene la configuraci√≥n, usarla
            if (window.emailService && window.emailService.envioConfig) {
                console.log('‚úÖ Usando configuraci√≥n de env√≠o desde EmailService');
                const config = window.emailService.envioConfig;
                this.results.envioConfig = config;

                console.log('‚úÖ Configuraci√≥n de Env√≠o encontrada:');
                
                // Admin notifications
                const adminNotif = config.notificacionesAdmin || {};
                console.log('üë§ Notificaciones Admin:');
                console.log('   üìß Nueva inscripci√≥n:', adminNotif.nuevaInscripcion ? '‚úÖ' : '‚ùå');
                console.log('   üí∞ Pago recibido:', adminNotif.pagoRecibido ? '‚úÖ' : '‚ùå');
                console.log('   ‚ùå Cancelaci√≥n curso:', adminNotif.cancelacionCurso ? '‚úÖ' : '‚ùå');
                console.log('   ‚è∞ Recordatorio curso:', adminNotif.recordatorioCurso ? '‚úÖ' : '‚ùå');

                // Student notifications  
                const alumnoNotif = config.notificacionesAlumno || {};
                console.log('üéì Notificaciones Alumno:');
                console.log('   ‚úÖ Confirmaci√≥n inscripci√≥n:', alumnoNotif.confirmacionInscripcion ? '‚úÖ' : '‚ùå');
                console.log('   üí∞ Confirmaci√≥n pago:', alumnoNotif.confirmacionPago ? '‚úÖ' : '‚ùå');
                console.log('   ‚è∞ Recordatorio curso:', alumnoNotif.recordatorioCurso ? '‚úÖ' : '‚ùå');
                console.log('   ‚ùå Cancelaci√≥n admin:', alumnoNotif.cancelacionAdmin ? '‚úÖ' : '‚ùå');

                // Verificar configuraciones cr√≠ticas
                if (!adminNotif.nuevaInscripcion) {
                    this.problems.push('‚ö†Ô∏è Notificaci√≥n "nueva inscripci√≥n" deshabilitada para admin');
                    this.recommendations.push('üîß Activar desde "Configuraci√≥n de Env√≠o"');
                }
                
                return;
            }
            
            // Estrategia 2: Acceso directo a Firestore si est√° disponible
            const dbInstance = window.db || db;
            if (!dbInstance) {
                this.problems.push('‚ùå No se puede acceder a configuraci√≥n de env√≠o');
                this.recommendations.push('üîß Verificar inicializaci√≥n de Firebase y EmailService');
                return;
            }
            
            const envioDoc = await getDoc(doc(dbInstance, 'configuraciones', 'envio'));
            
            if (!envioDoc.exists()) {
                this.problems.push('‚ùå NO EXISTE configuraci√≥n envio en Firestore');
                this.recommendations.push('üîß Las configuraciones se crean autom√°ticamente al acceder como admin');
                return;
            }

            const config = envioDoc.data();
            this.results.envioConfig = config;

            console.log('‚úÖ Configuraci√≥n de Env√≠o encontrada:');
            
            // Admin notifications
            const adminNotif = config.notificacionesAdmin || {};
            console.log('üë§ Notificaciones Admin:');
            console.log('   üìß Nueva inscripci√≥n:', adminNotif.nuevaInscripcion ? '‚úÖ' : '‚ùå');
            console.log('   üí∞ Pago recibido:', adminNotif.pagoRecibido ? '‚úÖ' : '‚ùå');
            console.log('   ‚ùå Cancelaci√≥n curso:', adminNotif.cancelacionCurso ? '‚úÖ' : '‚ùå');
            console.log('   ‚è∞ Recordatorio curso:', adminNotif.recordatorioCurso ? '‚úÖ' : '‚ùå');

            // Student notifications  
            const alumnoNotif = config.notificacionesAlumno || {};
            console.log('üéì Notificaciones Alumno:');
            console.log('   ‚úÖ Confirmaci√≥n inscripci√≥n:', alumnoNotif.confirmacionInscripcion ? '‚úÖ' : '‚ùå');
            console.log('   üí∞ Confirmaci√≥n pago:', alumnoNotif.confirmacionPago ? '‚úÖ' : '‚ùå');
            console.log('   ‚è∞ Recordatorio curso:', alumnoNotif.recordatorioCurso ? '‚úÖ' : '‚ùå');
            console.log('   ‚ùå Cancelaci√≥n admin:', alumnoNotif.cancelacionAdmin ? '‚úÖ' : '‚ùå');

            // Verificar configuraciones cr√≠ticas
            if (!adminNotif.nuevaInscripcion) {
                this.problems.push('‚ö†Ô∏è Notificaci√≥n "nueva inscripci√≥n" deshabilitada para admin');
                this.recommendations.push('üîß Activar desde "Configuraci√≥n de Env√≠o"');
            }

        } catch (error) {
            this.problems.push(`‚ùå Error accediendo envio: ${error.message}`);
        }
    }

    async checkEmailServiceState() {
        console.log('‚öôÔ∏è Verificando estado del EmailService...');

        if (!window.emailService) {
            this.problems.push('‚ùå window.emailService NO EXISTE');
            this.recommendations.push('üîß Verificar carga de email-service.js');
            return;
        }

        const service = window.emailService;
        this.results.emailService = {
            initialized: service.initialized,
            hasScriptConfig: !!service.scriptConfig,
            hasEnvioConfig: !!service.envioConfig
        };

        console.log('‚úÖ EmailService encontrado:');
        console.log('   üîß Inicializado:', service.initialized ? '‚úÖ' : '‚ùå');
        console.log('   üìß Configuraci√≥n Apps Script cargada:', service.scriptConfig ? '‚úÖ' : '‚ùå');
        console.log('   üìÆ Configuraci√≥n Env√≠o cargada:', service.envioConfig ? '‚úÖ' : '‚ùå');

        if (!service.initialized) {
            this.problems.push('‚ùå EmailService NO inicializado');
            this.recommendations.push('üîß Verificar inicializaci√≥n en app.js');
        }

        // Test de configuraciones espec√≠ficas
        if (service.envioConfig) {
            const nuevaInscripcionEnabled = service.isNotificationEnabled('nuevaInscripcion', 'admin');
            console.log('   üìß Nueva inscripci√≥n habilitada:', nuevaInscripcionEnabled ? '‚úÖ' : '‚ùå');
            
            const confirmacionEnabled = service.isNotificationEnabled('confirmacionInscripcion', 'alumno');
            console.log('   ‚úÖ Confirmaci√≥n habilitada:', confirmacionEnabled ? '‚úÖ' : '‚ùå');
        }
    }

    generateReport() {
        console.log('\n');
        console.log('üìã REPORTE DE DIAGN√ìSTICO');
        console.log('========================');
        
        // Asegurar que problems est√° inicializado
        if (!this.problems || !Array.isArray(this.problems)) {
            this.problems = [];
        }
        if (!this.recommendations || !Array.isArray(this.recommendations)) {
            this.recommendations = [];
        }
        
        if (this.problems.length === 0) {
            console.log('üéâ ¬°TODAS las configuraciones est√°n correctas!');
            console.log('‚úÖ El sistema deber√≠a estar enviando emails autom√°ticamente');
        } else {
            console.log(`‚ùå Se encontraron ${this.problems.length} problema(s):`);
            this.problems.forEach((problem, index) => {
                console.log(`${index + 1}. ${problem}`);
            });
        }

        if (this.recommendations.length > 0) {
            console.log('\nüîß RECOMENDACIONES:');
            this.recommendations.forEach((rec, index) => {
                console.log(`${index + 1}. ${rec}`);
            });
        }

        console.log('\nüí° PR√ìXIMOS PASOS:');
        console.log('1. Accede al panel de admin del sistema');
        console.log('2. Ve a "Configuraciones"');
        console.log('3. Configura "Gmail API - Apps Script" con URL real');
        console.log('4. Activa el servicio');
        console.log('5. Verifica "Configuraci√≥n de Env√≠o"');
        console.log('6. Realiza una inscripci√≥n de prueba');

        return this.results;
    }

    // M√©todo para ejecutar desde consola del navegador
    async testEmailFlow() {
        console.log('\nüß™ PROBANDO FLUJO DE EMAIL...');
        
        if (!window.emailService) {
            console.log('‚ùå EmailService no disponible');
            return { success: false, error: 'EmailService no disponible' };
        }

        try {
            // Verificar si EmailService est√° inicializado
            if (!window.emailService.initialized) {
                console.log('‚ö†Ô∏è EmailService no inicializado, intentando inicializar...');
                await window.emailService.initialize();
            }
            
            // Verificar configuraciones
            if (!window.emailService.scriptConfig) {
                console.log('‚ùå No hay configuraci√≥n de Apps Script');
                return { success: false, error: 'Apps Script no configurado' };
            }
            
            if (!window.emailService.scriptConfig.activo) {
                console.log('‚ùå Apps Script est√° desactivado');
                return { success: false, error: 'Apps Script desactivado' };
            }

            // Simular datos de inscripci√≥n
            const testData = {
                tipo: 'admin_test',
                destinatario: 'test@example.com', // Email de prueba que no se env√≠a realmente
                alumno: { 
                    nombre: 'Usuario Test Diagn√≥stico',
                    email: 'test@example.com'
                },
                curso: {
                    nombre: 'Curso de Prueba - Diagn√≥stico',
                    fecha: new Date(),
                    precio: 1000
                },
                timestamp: new Date().toISOString(),
                testMessage: 'Prueba de conectividad desde sistema de diagn√≥stico'
            };

            console.log('üì§ Enviando email de prueba...');
            console.log('üìã Configuraci√≥n Apps Script URL:', window.emailService.scriptConfig.url);
            
            const result = await window.emailService.sendEmail('admin_test', testData);
            
            if (result.success) {
                console.log('‚úÖ EMAIL DE PRUEBA PROCESADO EXITOSAMENTE');
                console.log('üéâ El sistema de emails est√° funcionando correctamente');
                console.log('üìß Resultado:', result);
            } else {
                console.log('‚ùå Error enviando email de prueba:', result.reason || result.error);
                console.log('üîç Detalles del error:', result);
            }

            return result;

        } catch (error) {
            console.log('‚ùå Error durante prueba de email:', error.message);
            console.log('üîç Stack trace:', error);
            return { success: false, error: error.message };
        }
    }
}

// Crear instancia global para uso desde consola
window.emailDiagnostic = new EmailConfigDiagnostic();

// Auto-ejecutar diagn√≥stico cuando se carga la p√°gina (solo en admin)
document.addEventListener('DOMContentLoaded', () => {
    // Funci√≥n para verificar si todo est√° listo
    const waitForInitialization = async () => {
        let attempts = 0;
        const maxAttempts = 60; // 30 segundos m√°ximo
        
        while (attempts < maxAttempts) {
            try {
                // Verificar que todos los sistemas est√©n listos
                if (window.authManager && 
                    window.authManager.currentUser && 
                    window.authManager.isCurrentUserAdmin() &&
                    window.emailService &&
                    window.db) { // Verificar que Firebase est√© disponible
                    
                    console.log('üîç Ejecutando diagn√≥stico autom√°tico...');
                    await window.emailDiagnostic.runDiagnostic();
                    
                    console.log('\nüí° COMANDOS DISPONIBLES EN CONSOLA:');
                    console.log('‚Ä¢ await emailDiagnostic.runDiagnostic()    - Ejecutar diagn√≥stico completo');
                    console.log('‚Ä¢ await emailDiagnostic.testEmailFlow()    - Probar env√≠o de email');
                    return;
                }
                
                // Esperar medio segundo antes del siguiente intento
                await new Promise(resolve => setTimeout(resolve, 500));
                attempts++;
                
            } catch (error) {
                console.warn('‚ö†Ô∏è Error durante inicializaci√≥n del diagn√≥stico:', error.message);
                await new Promise(resolve => setTimeout(resolve, 500));
                attempts++;
            }
        }
        
        console.log('‚ö†Ô∏è Diagn√≥stico autom√°tico no ejecutado - sistema no completamente inicializado');
        console.log('üí° Puedes ejecutarlo manualmente: await emailDiagnostic.runDiagnostic()');
    };
    
    // Iniciar verificaci√≥n despu√©s de un breve delay
    setTimeout(waitForInitialization, 1000);
});

// Funci√≥n de verificaci√≥n manual de estado
window.checkEmailSystemStatus = function() {
    console.log('üìä ESTADO DEL SISTEMA DE EMAILS:');
    console.log('================================');
    console.log('Firebase (db):', !!window.db);
    console.log('AuthManager:', !!window.authManager);
    console.log('EmailService:', !!window.emailService);
    console.log('Es Admin:', window.authManager?.isCurrentUserAdmin() || false);
    console.log('User:', window.authManager?.currentUser?.email || 'No autenticado');
    
    if (window.emailService) {
        console.log('EmailService inicializado:', window.emailService.initialized);
        console.log('Script Config:', !!window.emailService.scriptConfig);
        console.log('Envio Config:', !!window.emailService.envioConfig);
    }
    
    console.log('\nÔøΩ Para ejecutar diagn√≥stico: await emailDiagnostic.runDiagnostic()');
};

console.log('ÔøΩüîß Diagn√≥stico de Email cargado.');
console.log('üí° Usa: checkEmailSystemStatus() para ver el estado');
console.log('üí° Usa: await emailDiagnostic.runDiagnostic() para diagn√≥stico completo');