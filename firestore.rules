rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Reglas para usuarios
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para administradores - PERMITIR ESCRITURA COMPLETA USANDO EMAIL
    match /admins/{adminId} {
      allow read: if request.auth != null;
      // Permitir que un admin actualice su propio documento usando email como ID
      allow write: if request.auth != null && request.auth.token.email == adminId;
      // Permitir que otros admins escriban en documentos de admin
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para cursos - ADMINISTRADORES CON PERMISOS COMPLETOS
    match /cursos/{cursoId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para inscripciones - ADMINISTRADORES CON PERMISOS COMPLETOS
    match /inscripciones/{inscripcionId} {
      allow read: if request.auth != null && 
        (resource.data.usuarioId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.token.email)));
      allow create: if request.auth != null && 
        (request.resource.data.usuarioId == request.auth.uid ||
         exists(/databases/$(database)/documents/admins/$(request.auth.token.email)));
      allow update, delete: if request.auth != null && 
        (resource.data.usuarioId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.token.email)));
    }
    
    // Reglas para recetas - ADMINISTRADORES CON PERMISOS COMPLETOS
    match /recetas/{recetaId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para comentarios de recetas - ADMINISTRADORES CON PERMISOS COMPLETOS
    match /comentarios/{comentarioId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        (request.resource.data.usuarioId == request.auth.uid ||
         exists(/databases/$(database)/documents/admins/$(request.auth.token.email)));
      allow update, delete: if request.auth != null && 
        (resource.data.usuarioId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.token.email)));
    }
    
    // Reglas para cuentas bancarias - SOLO ADMINISTRADORES
    match /bankAccounts/{accountId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para notas Kanban - SOLO ADMINISTRADORES
    match /notes/{noteId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para movimientos contables - SOLO ADMINISTRADORES
    match /movimientos/{movimientoId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para logs del sistema - SOLO ADMINISTRADORES
    match /logs/{logId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para logs de seguridad admin - SOLO ADMINISTRADORES
    match /admin_security_logs/{logId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para CONFIGURACIONES PÚBLICAS - todos los usuarios autenticados pueden leer
    match /configuraciones/{configId} {
      allow read: if request.auth != null && configId in ['sede', 'envio', 'recordatorios'];
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para PROFESORES - lectura pública (para mostrar en cursos), escritura solo admins
    match /profesores/{profesorId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para PLANTILLAS EMAIL - SOLO ADMINISTRADORES (datos sensibles)
    match /plantillas_email/{plantillaId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Reglas para CONFIGURACIÓN ADMIN - SOLO ADMINISTRADORES (Apps Script, etc.)
    match /configuracion/{configId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Regla general para cualquier otra colección - SOLO ADMINISTRADORES
    match /{document=**} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
  }
}